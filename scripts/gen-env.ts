import * as fs from 'node:fs'
import { parse } from 'dotenv'

const comment = `// This file is auto-generated by gen-env.ts`
const head = `${comment}\n\nimport { z } from 'zod'`

const PUBLIC_VAR_PREFIX = 'PUBLIC_'
const clientVarResolver = 'process.env' // vite defaults to import.meta.env
const serverVarResolver = 'process.env'
const outputDir = './src/lib/env/generated'

function inferZType(val: string): string {
  if (val === 'false' || val === 'true') {
    return "z.string().transform(it => it ==='true')"
  }

  if (val === '') {
    return `z.ostring()`
  }

  // if (!isNaN(Number(val))) {
  //   return "z.string().transform(Number)";
  // }

  try {
    new URL(val)
    return 'z.string().url()'
  } catch (errro) {
    // ignore
  }
  return 'z.string()'
}

type KV = { key: string; value: string }

if (fs.existsSync('./.env')) {
  const txt = fs.readFileSync('./.env', { encoding: 'utf-8' })
  const vars = parse(txt)

  const clientVars: KV[] = []
  const serverVars: KV[] = []

  for (let k of Object.keys(vars)) {
    if (k.startsWith(PUBLIC_VAR_PREFIX)) {
      clientVars.push({
        key: k,
        value: vars[k],
      })
    } else {
      serverVars.push({
        key: k,
        value: vars[k],
      })
    }
  }

  const clientEnv = genClientEnv(clientVars)
  const serverEnv = genServerEnv(serverVars)

  const t = new Date()

  // format to 2020-01-01-00-00
  // const date = `${t.getFullYear()}-${
  //   t.getMonth() + 1
  // }-${t.getDate()}-${t.getHours()}-${t.getMinutes()}-${t.getSeconds()}`;

  fs.writeFileSync(`${outputDir}/server.ts`, serverEnv)
  fs.writeFileSync(`${outputDir}/client.ts`, clientEnv)
  console.log(`Wrote env to ./src/lib/env/generated`)
}

function genZSchema(keys: KV[]) {
  const zfields = keys
    .map((it) => `${it.key}: ${inferZType(it.value)}`)
    .join(',\n\t')
  const zschema = `const schema = z.object({\n\t${zfields}\n})`
  return zschema
}

function genServerEnv(vars: KV[]) {
  const srcFields = vars
    .map((it) => `${it.key}: ${serverVarResolver}.${it.key}`)
    .join(',\n\t')
  const src = `const source = {\n\t${srcFields}\n}`
  const foot = `export const env = schema.parse(source);`
  const schema = genZSchema(vars)
  return `${head}\n\n${schema}\n\n${src}\n\n${foot}`
}

function genClientEnv(vars: KV[]) {
  const srcFields = vars
    .map((it) => `${it.key}: ${clientVarResolver}.${it.key}`)
    .join(',\n\t')
  const src = `const source = {\n\t${srcFields}\n}`
  const schema = genZSchema(vars)
  const foot = `export const env = schema.parse(source);`
  return `${head}\n\n${schema}\n\n${src}\n\n${foot}`
}
